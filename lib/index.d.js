"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Custom Event Register Manager (singleton)
 */
var CustomEventRegisterManager = function CustomEventRegisterManager() {
  _classCallCheck(this, CustomEventRegisterManager);

  _defineProperty(this, "debug", void 0);

  _defineProperty(this, "_listeners", void 0);

  _defineProperty(this, "_eventListenerCounter", void 0);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ucG0vaW5kZXguZC50cyJdLCJuYW1lcyI6WyJDdXN0b21FdmVudFJlZ2lzdGVyTWFuYWdlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBYUE7QUFDQTtBQUNBO0lBQ2NBLDBCIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIEV2ZW50TGlzdGVuZXJEZXRhaWxzIHtcbiAgICBjYXB0dXJlPzogYm9vbGVhbjtcbiAgICBvbmNlPzogYm9vbGVhbjtcbiAgICBwYXNzaXZlPzogYm9vbGVhbjtcbiAgICBtb3pTeXN0ZW1Hcm91cD86IGJvb2xlYW47XG59XG5pbnRlcmZhY2UgTGlzdGVuZXJEZXRhaWxzIHtcbiAgICBfaWQ6IHN0cmluZyB8IG51bWJlcjtcbiAgICB0YXJnZXQ6IFdpbmRvdyB8IERvY3VtZW50IHwgRWxlbWVudDtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgbGlzdGVuZXIoKTogYW55O1xuICAgIG9wdGlvbnM6IEV2ZW50TGlzdGVuZXJEZXRhaWxzO1xufVxuLyoqXG4gKiBDdXN0b20gRXZlbnQgUmVnaXN0ZXIgTWFuYWdlciAoc2luZ2xldG9uKVxuICovXG5kZWNsYXJlIGNsYXNzIEN1c3RvbUV2ZW50UmVnaXN0ZXJNYW5hZ2VyIHtcbiAgICBkZWJ1ZzogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9saXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSBfZXZlbnRMaXN0ZW5lckNvdW50ZXI7XG4gICAgY29uc3RydWN0b3IoZGVidWc/OiBib29sZWFuKTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRlYnVnIG1vZGVcbiAgICAgKiBAcGFyYW0gdXNlIC0gQSBCb29sZWFuIGluZGljYXRpbmcgdGhhdCB0aGUgZGVidWcgc2hvdWxkIGJlIGVuYWJsZSBvciBub3RcbiAgICAgKi9cbiAgICBzZXREZWJ1Z01vZGUodXNlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBsaXN0ZW5lcnMgdG8gd2hpY2ggdGhlIHVzZXIgaGFzIHN1YnNjcmliZWRcbiAgICAgKiBAcmV0dXJucyB7TWFwfVxuICAgICAqL1xuICAgIGxpc3RBbGwoKTogTWFwPHN0cmluZywgQXJyYXk8TGlzdGVuZXJEZXRhaWxzPj47XG4gICAgLyoqXG4gICAgICogR2V0IGFzc29jaWF0ZWQgbGlzdGVuZXJzIGZvciB0aGUgdHlwZSBwcm92aWRlZCBpbiBhcmdzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBBIGNhc2Utc2Vuc2l0aXZlIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGV2ZW50IHR5cGUgdG8gdXNlIGZvciBnZXR0aW5nIHRoZSBhc3NvY2lhdGVkIGxpc3RlbmVyc1xuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICBnZXRMaXN0ZW5lckRldGFpbHNCeVR5cGUodHlwZTogc3RyaW5nKTogQXJyYXk8TGlzdGVuZXJEZXRhaWxzPjtcbiAgICAvKipcbiAgICAgKiBHZXQgYXNzb2NpYXRlZCBsaXN0ZW5lcnMgZm9yIHRoZSBpZCBwcm92aWRlZCBpbiBhcmdzXG4gICAgICogQHBhcmFtIGlkIHtzdHJpbmd8bnVtYmVyfSAtIEEgcmVsYXRlZCBpZCB1c2VkIHRvIGlkZW50aWZ5IHRoZSBldmVudFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R8dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIGdldExpc3RlbmVyRGV0YWlsc0J5SWQoaWQ6IGFueSk6IExpc3RlbmVyRGV0YWlscztcbiAgICAvKipcbiAgICAgKiBBZGQgZXZlbnQgbGlzdGVuZXIgb24gc3BlY2lmaWMgdGFyZ2V0XG4gICAgICogQHBhcmFtIHtXaW5kb3d8RG9jdW1lbnR8RWxlbWVudH0gdGFyZ2V0IC0gQW4gZWxlbWVudCB0byBhdHRhY2ggdGhlIGxpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgICAgICAgICAgICAgICAgICAgIC0gQSBjYXNlLXNlbnNpdGl2ZSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBldmVudCB0eXBlIHRvIGxpc3RlbiBmb3JcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgICAgICAgICAgICAgICAgICAgICAgICAgLSBBbiBldmVudCBsaXN0ZW5lciBjYWxsYmFja1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zICAgICAgICAgICAgICAgICAtIEFuIG9wdGlvbnMgb2JqZWN0IHNwZWNpZmllcyBjaGFyYWN0ZXJpc3RpY3MgYWJvdXQgdGhlIGV2ZW50IGxpc3RlbmVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGN1c3RvbUlkICAgICAgICAgICAgICAgIC0gQSBjdXN0b20gaWQgdXNlZCB0byBzZXQgdGhlIF9pZCBvZiB0aGUgZXZlbnRcbiAgICAgKi9cbiAgICBhZGRFdmVudExpc3RlbmVyKHRhcmdldDogV2luZG93IHwgRG9jdW1lbnQgfCBFbGVtZW50LCB0eXBlOiBzdHJpbmcsIGxpc3RlbmVyOiBhbnksIG9wdGlvbnM/OiBFdmVudExpc3RlbmVyRGV0YWlscywgY3VzdG9tSWQ/OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyBieSB0aGUgdHlwZSBwcm92aWRlZCBpbiBhcmdzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgICAgICAgICAgICAgICAtIEEgY2FzZS1zZW5zaXRpdmUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZXZlbnQgdHlwZSB0byB1c2UgZm9yIHJlbW92ZSB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRlZCBsaXN0ZW5lcnNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJhc2ljQ2hlY2tQcm9jZXNzIC0gQSBib29sZWFuIHRoYXQgZGV0ZXJtaW5lcyBpZiB3ZSBuZWVkIHRvIGV4ZWN1dGUgdGhlIGJhc2ljIGNoZWNrIHVwIHByb2Nlc3NcbiAgICAgKi9cbiAgICByZW1vdmVFdmVudExpc3RlbmVyc0J5VHlwZSh0eXBlOiBzdHJpbmcsIGJhc2ljQ2hlY2tQcm9jZXNzPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIGZvciBlYWNoIHR5cGUgcHJvdmlkZWQgaW4gYXJnc1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IHR5cGVzIC0gQW4gYXJyYXkgb2YgY2FzZS1zZW5zaXRpdmUgc3RyaW5ncyByZXByZXNlbnRpbmcgdGhlIGV2ZW50IHR5cGUgdG8gdXNlIGZvclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGFzc29jaWF0ZWQgbGlzdGVuZXJzXG4gICAgICovXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnNCeVR5cGVzKHR5cGVzPzogQXJyYXk8c3RyaW5nPik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIGJ5IHRoZSB0YXJnZXQgcHJvdmlkZWQgaW4gYXJnc1xuICAgICAqIEBwYXJhbSB0YXJnZXQgICAgICAgICAgICAtIEEgcmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgdG8gd2hpY2ggdGhlIGV2ZW50IHdpbGwgYmUgZGlzcGF0Y2hlZFxuICAgICAqIEBwYXJhbSBiYXNpY0NoZWNrUHJvY2VzcyAtIEEgYm9vbGVhbiB0aGF0IGRldGVybWluZXMgaWYgd2UgbmVlZCB0byBleGVjdXRlIHRoZSBiYXNpYyBjaGVjayB1cCBwcm9jZXNzXG4gICAgICovXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnNCeVRhcmdldCh0YXJnZXQ6IFdpbmRvdyB8IERvY3VtZW50IHwgRWxlbWVudCwgYmFzaWNDaGVja1Byb2Nlc3M/OiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgZm9yIGVhY2ggdHlwZSBwcm92aWRlZCBpbiBhcmdzXG4gICAgICogQHBhcmFtIHtBcnJheX0gdGFyZ2V0cyAtIEFuIGFycmF5IG9mIHJlZmVyZW5jZXMgdG8gdGhlIHRhcmdldHMgLSB0byB3aGljaCB0aGUgZXZlbnRzIHdhcyBwcmV2aW91c2x5IGRpc3BhdGNoZWQgLVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgcmVtb3ZlIHRoZSBhc3NvY2lhdGVkIGxpc3RlbmVyc1xuICAgICAqL1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzQnlUYXJnZXRzKHRhcmdldHM/OiBBcnJheTxXaW5kb3cgfCBEb2N1bWVudCB8IEVsZW1lbnQ+KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIgYnkgaGlzIGlkIHByb3ZpZGVkIGluIGFyZ3NcbiAgICAgKiBAcGFyYW0gaWQge3N0cmluZ3xudW1iZXJ9IC0gQSByZWxhdGVkIGlkIHVzZWQgdGhhdCBpZGVudGlmeSB0aGUgZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBAcGFyYW0gYmFzaWNDaGVja1Byb2Nlc3MgIC0gQSBib29sZWFuIHRoYXQgZGV0ZXJtaW5lcyBpZiB3ZSBuZWVkIHRvIGV4ZWN1dGUgdGhlIGJhc2ljIGNoZWNrIHVwIHByb2Nlc3NcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSAgICAgICAgIC0gVHJ1ZSBpZiB0aGUgcHJvY2VzcyBoYXMgYmVlbiBzdWNjZXNzZnVsbGVkLiBPdGhlcndpc2UsIGZhbHNlLlxuICAgICAqL1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJCeUlkKGlkOiBzdHJpbmcgfCBudW1iZXIsIGJhc2ljQ2hlY2tQcm9jZXNzPzogYm9vbGVhbik6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFsbCB0aGUgZXZlbnQgbGlzdGVuZXJzIGZvciBlYWNoIGlkIHByb3ZpZGVkIGluIGFyZ3NcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpZHMgLSBBbiBhcnJheSBvZiB0aGUgaWRzIG9mIGVhY2ggZXZlbnQgbGlzdGVuZXJzIHRvIHJlbW92ZVxuICAgICAqL1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzQnlJZHMoaWRzPzogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPik6IHZvaWQ7XG59XG5kZWNsYXJlIGNvbnN0IF9kZWZhdWx0OiBDdXN0b21FdmVudFJlZ2lzdGVyTWFuYWdlcjtcbmV4cG9ydCBkZWZhdWx0IF9kZWZhdWx0O1xuIl19